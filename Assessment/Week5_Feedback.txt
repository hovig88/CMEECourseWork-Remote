Starting weekly assessment for Hovig, Week5

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 137.28 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week6, Week1, Week7, Assessment, Week10, Week5, Week2, Week9, Week4, .git, Week3, MiniProject

Found the following files in parent directory: .gitignore, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~
*.tmp
__pycache__/

# History files
.Rhistory
.Rapp.history

# Session Data files
.RData

# User-specific files
.Ruserdata

# Example code in package build process
*-Ex.R

# Output files from R CMD build
/*.tar.gz

# Output files from R CMD check
/*.Rcheck/

# RStudio files
.Rproj.user/

# produced vignettes
vignettes/*.html
vignettes/*.pdf

# OAuth2 token, see https://github.com/hadley/httr/releases/tag/v0.3
.httr-oauth

# knitr and R markdown default cache directories
*_cache/
/cache/

# Temporary files created by R markdown
*.utf8.md
*.knit.md
**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
# Computational Methods in Ecology and Evolution (CMEE) Masters Program

* This repository includes weekly practicals/assignments and in-class scripts required for the partial completion of the CMEE Masters program.

* The **CMEECourseWork-Remote** directory contains a `.gitignore` file and subdirectories named as `Week1`, `Week2`,...etc. This will be updated weekly as the course progresses. 

## Contents

### Week 1

This directory includes code and data related to the first week's practicals/assignments and in-class scripts. 

In the first week, the following sections were covered:

* Unix
* Shell scripting
* Version control with Git
* Scientific documents with LaTeX

### Week 2

This directory includes code and data related to the second week's practicals/assignments and in-class scripts. 

In the second week, the following sections were covered:

* Biological computing in Python I

### Week 3

This directory includes code and data related to the third week's practicals/assignments and in-class scripts. 

In the third week, the following sections were covered:

* Biological Computing in R

### Week 4

This directory includes code and data related to the fourth week's practicals/assignments and in-class scripts. 

In the fourth week, the following sections were covered:

* Statistics in R
* CMEE Miniproject Start

### Week 5

This directory includes code and data related to the fifth week's practicals/assignments and in-class scripts. 

In the fifth week, the following sections were covered:

* Statistics in R
* Spatial Analyses and GIS
* CMEE Miniproject Start

### Week 6

This directory includes code and data related to the sixth week's practicals/assignments and in-class scripts. 

In the sixth week, the following sections were covered:

* Genomics and Bioinformatics

### Week 7

This directory includes code and data related to the seventh week's practicals/assignments and in-class scripts. 

In the seventh week, the following sections were covered:

* Biological Computing in Python II

### MiniProject (Week 8)

This directory includes code and data related to the eighth week's practicals/assignments and in-class scripts. 

In the eighth week, the following sections were covered:

* CMEE Miniproject: Hackathon

### Week 9

This directory includes code and data related to the ninth week's practicals/assignments and in-class scripts. 

In the ninth week, the following sections were covered:

* High Performance Computing

### Week 10

This directory includes code and data related to the tenth week's practicals/assignments and in-class scripts. 

In the tenth week, the following sections were covered:

* Biological Data Structures and C

## Authors

Jedi (in training): Hovig Artinian

Academic email: ha819@ic.ac.uk

Personal email: artinianhovig@gmail.com

## License

None

## Acknowledgements

I would like to thank Master Jedi Samraat Pawar for accepting me as his young padawan.
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 9 weekly directories: Week1, Week10, Week2, Week3, Week4, Week5, Week6, Week7, Week9

The Week5 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK5...

Found the following directories: code, sandbox, data, results

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
# Week 5: Spatial Analyses and Geographic Information Systems (GIS)

* The fifth week was focused on using and handling GIS data, along with basic remote sensing to generate GIS data and the use of GIS data in a range of applications using R.

* The **Week5** directory includes the following subdirectories: *code*, *data*, *results*, and *sandbox*.
    - code - includes all the Week 5 practicals
    - data - includes the data needed as inputs for the practicals
    - results - essentially an empty directory, but includes a .gitignore file (since completely empty directories cannnot be pushed to git)
    - sandbox - similar to a recycle bin; disposing files that are not needed for assessment, but might still be useful for the author if and when needed

## Authors

Jedi (in training): Hovig Artinian

Academic email: ha819@ic.ac.uk

Personal email: artinianhovig@gmail.com

## License

None

## Acknowledgements

Fifth week of Jedi training completed!
**********************************************************************

Found following files in results directory: .gitignore...

Found 1 code files: GIS_Practical.R

======================================================================
Testing script/code files...

======================================================================
Inspecting script file GIS_Practical.R...

File contents are:
**********************************************************************
## 1 - GETTING STARTED ##

rm(list=ls())
setwd("~/Documents/CMEECourseWork/Week5/code/")


## 2 - R PACKAGES FOR GIS ##

require(raster)
require(sf)
require(viridis)
require(units)
require(rgeos)
require(proj4)
require(lwgeom)

## 3 - VECTOR DATA ##

## 3.1 - MAKING VECTORS FROM COORDINATES ##

pop_dens = data.frame(n_km2 = c(260, 67, 151, 4500, 133),
                      country = c("England", "Scotland", "Wales", "London", "Northern Ireland"))
print(pop_dens)

# Create coordinates for each country
# - this is a list of sets of coordinates forming the edge of the polygon.
# - note that they have to _close_ (have the same coordinate at either end)
scotland = rbind(c(-5, 58.6), c(-3, 58.6), c(-4, 57.6),
                 c(-1.5, 57.6), c(-2, 55.8), c(-3, 55),
                 c(-5, 55), c(-6, 56), c(-5, 58.6))
england = rbind(c(-2, 55.8), c(0.5, 52.8), c(1.6, 52.8),
                c(0.7, 50.7), c(-5.7, 50), c(-2.7, 51.5),
                c(-3, 53.4), c(-3, 55), c(-2, 55.8))
wales = rbind(c(-2.5, 51.3), c(-5.3, 51.8), c(-4.5, 53.4),
              c(-2.8, 53.4), c(-2.5, 51.3))
ireland = rbind(c(-10, 51.5), c(-10, 54.2), c(-7.5, 55.3),
                c(-5.9, 55.3), c(-5.9, 52.2), c(-10, 51.5))

# Convert these coordinates into feature geometries
# - these are simple coordinate sets with no projection information
scotland = st_polygon(list(scotland))
england = st_polygon(list(england))
wales = st_polygon(list(wales))
ireland = st_polygon(list(ireland))

# Combine geometries into a simple feature column
uk_eire = st_sfc(wales, england, scotland, ireland, crs = 4326)
plot(uk_eire, asp = 1)

# Another approach to creating point vector data sources is used below to create point locations for capital cities
uk_eire_capitals = data.frame(long = c(-0.1, -3.2, -3.2, -6.0, -6.25),
                              lat = c(51.5, 51.5, 55.8, 54.6, 53.30),
                              name = c("London", "Cardiff", "Edinburgh", "Belfast", "Dublin"))

uk_eire_capitals = st_as_sf(uk_eire_capitals, coords = c("long", "lat"), crs = 4326)


## 3.2 - VECTOR GEOMETRY OPERATIONS ##

# Using buffer operation to create a polygon for London
st_pauls = st_point(x = c(-0.098056, 51.513611))
london = st_buffer(st_pauls, 0.25)

# Using difference operation to differentiate between London and England
england_no_london = st_difference(england, london)

# Count the points and show the number of rings within the polygon features
lengths(scotland)

lengths(england_no_london)

# Same idea, but this time to differentiate between Wales and England
wales = st_difference(wales, england)

# A rough polygon that includes Northern Ireland and surrounding sea.
# - note the alternative way of providing the coordinates
ni_area = st_polygon(list(cbind(x = c(-8.1, -6, -5, -6, -8.1), y = c(54.4, 56, 55, 54, 54.4))))

northern_ireland = st_intersection(ireland, ni_area)
eire = st_difference(ireland, ni_area)

# Combine the final geometries
uk_eire = st_sfc(wales, england_no_london, scotland, london, northern_ireland, eire, crs = 4326)


## 3.3 - FEATURES AND GEOMETRIES ##

# make the UK into a single feature
uk_country = st_union(uk_eire[-6]) # excluding ireland

# compare six Polygon features with one Multipolygon feature
print(uk_eire)
print(uk_country)

# Plot them
par(mfrow=c(1, 2), mar=c(3,3,1,1))
plot(uk_eire, asp=1, col=rainbow(6))
plot(st_geometry(uk_eire_capitals), add=TRUE)
plot(uk_country, asp=1, col="lightblue")


## 3.4 - VECTOR DATA AND ATTRIBUTES ##

uk_eire = st_sf(name = c("Wales", "England", "Scotland", "London",
                         "Northern Ireland", "Eire"),
                geometry = uk_eire)

plot(uk_eire, asp=1)

# adding attributes directly
uk_eire$capital = c("Cardiff", "London", "Edinburgh", NA, "Belfast", "Dublin")

uk_eire = merge(uk_eire, pop_dens, by.x = "name", by.y = "country", all.x = TRUE)
print(uk_eire)


## 3.5 - SPATIAL ATTRIBUTES ##

# Centroids of features
uk_eire_centroids = st_centroid(uk_eire)
st_coordinates(uk_eire_centroids)

# Area of a feature
uk_eire$area = st_area(uk_eire)

# Length of a feature
# The length of a polygon is the perimeter length
# -note that this includes the length of internal holes.
uk_eire$length = st_length(uk_eire)
 
# Look at the result
print(uk_eire)

# You can change units in a neat way
uk_eire$area = set_units(uk_eire$area, "km^2")
uk_eire$length = set_units(uk_eire$length, "km")

#And which won't let you make silly errors like turning a length into weight
# > uk_eire$area = set_units(uk_eire$area, "kg")
# Error: cannot convert km^2 into kg

# Or you can simply convert the `units` version to simple numbers
uk_eire$length = as.numeric(uk_eire$length)
print(uk_eire)

# Distance between objects
st_distance(uk_eire)
st_distance(uk_eire_centroids)


## 3.6 - PLOTTING SF OBJECTS ##

plot(uk_eire["n_km2"], asp=1)

# Scaling the legend
plot(uk_eire["n_km2"], asp=1, logz = TRUE)


## 3.7 - REPROJECTING VECTOR DATA ##

# British National Grid (EPSG:27700)
uk_eire_BNG = st_transform(uk_eire, 27700)

# The bounding box of the data shows the change in units
st_bbox(uk_eire)
st_bbox(uk_eire_BNG)

# UTM50N (EPSG:32650)
uk_eire_UTM50N = st_transform(uk_eire, 32650)

# Plot the results
par(mfrow=c(1, 3), mar=c(3,3,1,1))
plot(st_geometry(uk_eire), asp=1, axes=TRUE, main="WGS 84")
plot(st_geometry(uk_eire_BNG), axes=TRUE, main="OSGB 1936 / BNG")
plot(st_geometry(uk_eire_UTM50N), axes=TRUE, main="UTM 50N")


## 3.7.1 - PROJ4 STRINGS ##

# text strings that contain often long and confusing sets of options and parameters 
# that actually define a particular projection. The sf package is kind to us, but 
# some other packages are not, so you may see these in R and you can also see the 
# proj4 strings on the EPSG website:

# 4326: +init=EPSG:4326 +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0
# 27700: +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000+ellps=airy
#        +towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489 +units=m +no_defs
# 32650: +proj=utm +zone=50 +datum=WGS84 +units=m +no_defs



## 3.7.2 - Degrees are not constant ##

# Set up some points separated by 1 degree latitude and longitude from St. Pauls
st_pauls = st_sfc(st_pauls, crs=4326)
one_deg_west_pt = st_sfc(st_pauls - c(1, 0), crs=4326) # near Goring
one_deg_north_pt = st_sfc(st_pauls + c(0, 1), crs=4326) # near Peterborough

# Calculate the distance between St Pauls and each point
st_distance(st_pauls, one_deg_west_pt)
st_distance(st_pauls, one_deg_north_pt)
st_distance(st_transform(st_pauls, 27700), st_transform(one_deg_west_pt, 27700))

# transform St Pauls to BNG and buffer using 25km
london_bng = st_buffer(st_transform(st_pauls, 27700), 25000)

# In one line, transform england to BNG and cut out London
england_not_london_bng = st_difference(st_transform(st_sfc(england, crs=4326), 27700),
                                       london_bng)

# project the other features and combine everything together
others_bng = st_transform(st_sfc(eire, northern_ireland, scotland, wales, crs=4326), 27700)
corrected = c(others_bng, london_bng, england_not_london_bng)

# Plot that and marvel at the nice circular feature around London
par(mar=c(3,3,1,1))
plot(corrected, main="25km radius London", axes=TRUE)


## 4 - RASTERS ##

## 4.1 - CREATING A RASTER ##

# Create an empty raster object covering UK and Eire
uk_raster_WGS84 = raster(xmn = -11, xmx = 2, ymn = 49.5, ymx = 59,
                         res = 0.5, crs = "+init=EPSG:4326")
hasValues(uk_raster_WGS84)

# Add data to the raster: just the number 1 to number of cells
values(uk_raster_WGS84) = seq(length(uk_raster_WGS84))

plot(uk_raster_WGS84)
plot(st_geometry(uk_eire), add=TRUE, border = "black", lwd = 2, col = "#FFFFFF44")


## 4.2 - CHANGING RASTER RESOLUTION ##

# Define a simple 4 x 4 square raster
m = matrix(c(1, 1, 3, 3,
             1, 2, 4, 3,
             5, 5, 7, 8,
             6, 6, 7, 7), ncol=4, byrow=TRUE)

square = raster(m)


## 4.2.1 - AGGREGATING RASTERS ##

## Average values
square_agg_mean = aggregate(square, fact=2, fun=mean)
values(square_agg_mean)
# the higher the factor value, the lower the resolution since we're aggregating more cells together

# Maximum values
square_agg_max = aggregate(square, fact=2, fun=max)
values(square_agg_max)

# Modal values for categories
square_agg_modal = aggregate(square, fact=2, fun=modal)
values(square_agg_modal)
# one issue with using modes is that sometimes some cells have no modes 
# (e.g. two 5s and two 6s as maxes), so it chooses randomly. Of course,
# you can specify which one you want using `first` and `last`, but it's
# not the mode.


## 4.2.2 DISAGGREGATING RASTER

# Copy parents
square_disagg = disaggregate(square, fact=2)
# Interpolate
square_disagg_interp = disaggregate(square, fact=2, method="bilinear")


## 4.3 - REPROJECTING A RASTER ##

# make two simple `sfc` objects containing points in the
# lower left and top right of the two grids
uk_pts_WGS84 = st_sfc(st_point(c(-11, 49.5)), st_point(c(2, 59)), crs=4326)
uk_pts_BNG = st_sfc(st_point(c(-2e5, 0)), st_point(c(7e5, 1e6)), crs=27700)

# Use st_make_grid to quickly create a polygon grid with the right cellsize
uk_grid_WGS84 = st_make_grid(uk_pts_WGS84, cellsize = 0.5)
uk_grid_BNG = st_make_grid(uk_pts_BNG, cellsize = 1e5)

# Reproject BNG grid into WGS84
uk_grid_BNG_as_WGS84 = st_transform(uk_grid_BNG, 4326)

# Plot the features
plot(uk_grid_WGS84, asp=1, border="grey", xlim=c(-13,4))
plot(st_geometry(uk_eire), add=TRUE, border="darkgreen", lwd=2)
plot(uk_grid_BNG_as_WGS84, border="red", add=TRUE)

# Using the projectRaster function
# Create the target raster
#uk_raster_BNG <- raster(xmn=-200000, xmx=700000, ymn=0, ymx=1000000,
#                       res=100000, crs='+init=EPSG:27700')
#uk_raster_BNG_interp = projectRaster(uk_raster_WGS84, uk_raster_BNG, method="bilinear")
#uk_raster_BNG_ngb = projectRaster(uk_raster_WGS84, uk_raster_BNG, method="ngb")
#
# compare the values in the top row
#round(values(uk_raster_BNG_interp)[1:9], 2)
#values(uk_raster_BNG_ngb)
#
#par(mfrow=c(1,3), mar=c(1,1,2,1))
#plot(uk_raster_BNG_interp, main="Interpolated", axes=FALSE, legend=FALSE)
#plot(uk_raster_BNG_ngb, main="Nearest Neighbour", axes=FALSE, legend=FALSE)

# bilinear uses a weighted average of the four nearest cell centers - not recommended for categorical data
# nearest neighbor aka ngb is best used for categorical data, value of the output cell is determined by the nearest cell center on the input grid


## 5 - CONVERTING BETWEEN VECTOR AND RASTER DATA TYPES ##

## 5.1 - VECTOR TO RASTER ##

# Create the target raster
uk_20km = raster(xmn=-200000, xmx=650000, ymn=0, ymx=1000000,
                 res=20000, crs="+init=EPSG:27700")

# Rasterizing polygons
uk_eire_poly_20km = rasterize(as(uk_eire_BNG, "Spatial"), uk_20km, field="name")

# Rasterizing lines
uk_eire_BNG_line = st_cast(uk_eire_BNG, "LINESTRING")

st_agr(uk_eire_BNG) = "constant" # tells sf function that attributes are constant

# Rasterizing lines
uk_eire_BNG_line = st_cast(uk_eire_BNG, "LINESTRING")
uk_eire_line_20km = rasterize(as(uk_eire_BNG_line, "Spatial"), uk_20km, field="name")

# Rasterizing points
# - This isn't quite as neat. You need to take two steps in the cast and need to convert
#   the name factor to numeric.
uk_eire_BNG_point = st_cast(st_cast(uk_eire_BNG, "MULTIPOINT"), "POINT")
uk_eire_BNG_point$name = as.numeric(uk_eire_BNG_point$name)
uk_eire_point_20km = rasterize(as(uk_eire_BNG_point, "Spatial"), uk_20km, field="name")

# Plotting those different outcomes
par(mfrow=c(1,3), mar=c(1,1,1,1))
plot(uk_eire_poly_20km, col=viridis(6, alpha=0.5), legend=FALSE, axes=FALSE)
plot(st_geometry(uk_eire_BNG), add=TRUE, border="grey")

plot(uk_eire_line_20km, col=viridis(6, alpha=0.5), legend=FALSE, axes=FALSE)
plot(st_geometry(uk_eire_BNG), add=TRUE, border="grey")

plot(uk_eire_point_20km, col=viridis(6, alpha=0.5), legend=FALSE, axes=FALSE)
plot(st_geometry(uk_eire_BNG), add=TRUE, border="grey")


## 5.2 - RASTER TO VECTOR ##

# rasterToPolygons returns a polygon for each cell and returns a Spatial object
poly_from_rast = rasterToPolygons(uk_eire_poly_20km)
poly_from_rast = st_as_sf(poly_from_rast)

# but can be set to dissolve the boundaries between cells with identical values
poly_from_rast_dissolve = rasterToPolygons(uk_eire_poly_20km, dissolve=TRUE)
poly_from_rast_dissolve = as(poly_from_rast_dissolve, "sf")

# rasterToPoints returns a matrix of coordinates and values.
points_from_rast = rasterToPoints(uk_eire_poly_20km)
points_from_rast = st_as_sf(data.frame(points_from_rast), coords=c("x","y"))

# Plot the outputs - using key.pos=NULL to suppress the key and
# reset=FALSE to avoid plot.sf altering the par() options
par(mfrow=c(1,3), mar=c(1,1,1,1))
plot(poly_from_rast["layer"], key.pos=NULL, reset=FALSE)
plot(poly_from_rast_dissolve, key.pos=NULL, reset=FALSE)
plot(points_from_rast, key.pos=NULL, reset=FALSE)


## 6 - USING DATA IN FILES ##

## 6.1 - SAVING VECTOR DATA ##

# writing and saving data into different file formats
st_write(uk_eire, "../data/uk_eire_WGS84.shp")
st_write(uk_eire_BNG, "../data/uk_eire_BNG.shp")
st_write(uk_eire, "../data/uk_eire_WGS84.geojson")
st_write(uk_eire, "../data/uk_eire_WGS84.gpkg")
st_write(uk_eire, "../data/uk_eire_WGS84.json", driver="GeoJSON")


## 6.2 - SAVING RASTER DATA ##

# Save a GeoTiff
writeRaster(uk_raster_BNG_interp, "../data/uk_raster_BNG_interp.tif")
writeRaster(uk_raster_BNG_ngb, "../data/uk_raster_BNG_ngb.asc", format="ascii")


## 6.3 - LOADING VECTOR DATA ##

# Load a vector shapefile
ne_110 = st_read("../data/ne_110m_admin_0_countries/ne_110m_admin_0_countries.shp")

# Also load some WHO data on 2016 life expectancy
life_exp = read.csv(file = "../data/WHOSIS_000001.csv")

# Generate two stacked plots with narrow margins
par(mfrow=c(2,1), mar=c(1,1,1,1))

# The first plot is easy
plot(ne_110["GDP_MD_EST"], asp=1, main="Global GDP", logz=TRUE, key.pos=4)

# Then for the second we need to merge the data
ne_110 = merge(ne_110, life_exp, by.x="ISO_A3_EH", by.y="COUNTRY", all.x=TRUE)

# Create a sequence of break values to use for display
bks = seq(50, 85, by=0.25)

# Plot the data
plot(ne_110["Numeric"], asp=1, main="Global 2016 Life Expectancy (Both sexes)",
     breaks=bks, pal=viridis, key.pos=4)

# Read in Southern Ocean example data
so_data = read.csv("../data/Southern_Ocean.csv", header=TRUE)
head(so_data)

# Convert the data frame to an sf object
so_data = st_as_sf(so_data, coords=c("long", "lat"), crs=4326)
head(so_data)


## 6.4 - LOADING RASTER DATA ##

etopo_25 = raster("../data/etopo_25.tif")

# Look at the data content
print(etopo_25)
plot(etopo_25)

# Controlling raster plots
bks <- seq(-10000, 6000, by=250)
land_cols  <- terrain.colors(24)
sea_pal <- colorRampPalette(c('darkslateblue', 'steelblue', 'paleturquoise'))
sea_cols <- sea_pal(40)
plot(etopo_25, axes=FALSE, breaks=bks, col=c(sea_cols, land_cols), 
     axis.args=list(at=seq(-10000, 6000, by=2000), lab=seq(-10,6,by=2)))

## 6.4.1 - RASTER STACKS ##

# Download bioclim data: global maximum temperature at 10 arc minute resolution
tmax = getData("worldclim", download=TRUE, path="../data", var="tmax", res=10)
print(tmax)
dir("../data/wc10")

# scale the data
tmax = tmax / 10

# Extract January and July data and the annual maximum by location.
tmax_jan = tmax[[1]]
tmax_jul = tmax[[7]]
tmax_max = max(tmax)

# Plot those maps
par(mfrow=c(3,1), mar=c(2,2,1,1))
bks = seq(-500, 500, length=101)
pal = colorRampPalette(c("lightblue", "grey", "firebrick"))
cols = pal(100)
ax.args = list(at = seq(-500, 500, by=100))
plot(tmax_jan, col=cols, breaks=bks, axis.args=ax.args, main="January maximum temperature")
plot(tmax_jul, col=cols, breaks=bks, axis.args=ax.args, main="July maximum temperature")
plot(tmax_max, col=cols, breaks=bks, axis.args=ax.args, main="Annual maximum temperature")


## 7 - OVERLAYING RASTER AND VECTOR DATA ##

## 7.1 - CROPPING DATA ##

# The crop function for raster data...
so_extent = extent(-60, -20, -65, -45)

# ... and the st_crop function to reduce some higher resolution coastline data
so_topo = crop(etopo_25, so_extent)

ne_10 = st_read("../data/ne_10m_admin_0_countries/ne_10m_admin_0_countries.shp")

st_agr(ne_10) = "constant"
so_ne_10 = st_crop(ne_10, so_extent)

# Plotting Southern Ocean chlorophyll
sea_pal <- colorRampPalette(c('grey30', 'grey50', 'grey70'))
plot(so_topo, col=sea_pal(100), asp=1, legend=FALSE)
contour(so_topo, levels=c(-2000, -4000, -6000), add=TRUE, col='grey80')
plot(st_geometry(so_ne_10), add=TRUE, col='grey90', border='grey40')
plot(so_data['chlorophyll'], add=TRUE, logz=TRUE, pch=20, cex=2, pal=viridis, border='white', reset=FALSE)
.image_scale(log10(so_data$chlorophyll), col=viridis(18), key.length=0.8, key.pos=4, logz=TRUE)


## 8 - SPATIAL JOINS AND RASTER DATA EXTRACTION ##

## 8.1 - SPATIAL JOINING ##

# extract Africa from the ne_110 data and keep the columns we want to use
africa = subset(ne_110, CONTINENT == "Africa", select=c("ADMIN", "POP_EST"))

# transform to the Robinson projection
africa = st_transform(africa, crs=54030)

# create a random sample of points
mosquito_points = st_sample(africa, 1000)

# Create the plot
plot(st_geometry(africa), col="khaki")
plot(mosquito_points, col="firebrick", add=TRUE)

mosquito_points <- st_sf(mosquito_points)
mosquito_points <- st_join(mosquito_points, africa['ADMIN'])

plot(st_geometry(africa), col="khaki")
plot(mosquito_points["ADMIN"], add=TRUE)

mosquito_points_agg = aggregate(mosquito_points, by=list(country=mosquito_points$ADMIN), FUN=length)
names(mosquito_points_agg)[2] = "n_outbreaks"
head(mosquito_points_agg)

africa = st_join(africa, mosquito_points_agg)
africa$area = as.numeric(st_area(africa))
head(africa)

par(mfrow=c(1,2), mar=c(3,3,1,1), mgp=c(2,1,0))
plot(n_outbreaks ~ POP_EST, data=africa, log="xy",
     ylab="Number of outbreaks", xlab="Population size")
plot(n_outbreaks ~ area, data=africa, log="xy",
     ylab="Number of outbreaks", xlab="Area (m2)")

# Alien invasion
# Load the data and convert to a sf object
alien_xy = read.csv("../data/aliens.csv")
alien_xy = st_as_sf(alien_xy, coords=c("long", "lat"), crs=4326)

# Add country information and find the total number of aliens per country
alien_xy = st_join(alien_xy, ne_110["ADMIN"])
aliens_by_country = aggregate(n_aliens ~ ADMIN, data=alien_xy, FUN=sum)

# Add the alien counts into the country data
ne_110 = merge(ne_110, aliens_by_country, all.x=TRUE)
ne_110$aliens_per_capita = with(ne_110, n_aliens / POP_EST)

# create the scale colours
bks = seq(-8, 2, length=101)
pal = colorRampPalette(c("darkblue", "lightblue", "salmon", "darkred"))

plot(ne_110["aliens_per_capita"], logz=TRUE, breaks=bks, pal=pal, key.pos=4)


## 8.2 - EXTRACTING DATA FROM RASTERS ##

uk_eire_etopo <- raster('data/etopo_uk.tif')

uk_eire_detail <- subset(ne_10, ADMIN %in% c('United Kingdom', "Ireland"))
uk_eire_detail_raster <- rasterize(as(uk_eire_detail, 'Spatial'), uk_eire_etopo)
uk_eire_elev <- mask(uk_eire_etopo, uk_eire_detail_raster)

par(mfrow=c(1,2), mar=c(3,3,1,1), mgp=c(2,1,0))
plot(uk_eire_etopo, axis.args=list(las=3))
plot(uk_eire_elev, axis.args=list(las=3))
plot(st_geometry(uk_eire_detail), add=TRUE, border='grey')


## 8.2.1 - RASTER CELL STATISTICS AND LOCATIONS ##

cellStats(uk_eire_elev, max)
cellStats(uk_eire_elev, quantile)
which.max(uk_eire_elev)
which(uk_eire_elev > 1100, cells=TRUE)

# Highlight highest point and areas below sea level

max_cell = which.max(uk_eire_elev)
max_xy = xyFromCell(uk_eire_elev, max_cell)
max_sfc = st_sfc(st_point(max_xy), crs=4326)
bsl_cell = Which(uk_eire_elev < 0, cells=TRUE)
bsl_xy = xyFromCell(uk_eire_elev, bsl_cell)
bsl_sfc = st_sfc(st_multipoint(bsl_xy), crs=4326)

plot(uk_eire_elev, axis.args=list(las=3))
plot(max_sfc, add=TRUE, pch=24, bg='red')
plot(bsl_sfc, add=TRUE, pch=25, bg='lightblue', cex=0.6)


## 8.2.2 - THE EXTRACT FUNCTION ##

uk_eire_capitals$elev = extract(uk_eire_elev, uk_eire_capitals)
print(uk_eire_capitals)

uk_eire$mean_height = extract(uk_eire_elev, uk_eire, fun=mean, na.rm=TRUE)
uk_eire

# st_layers function
st_layers("../data/National_Trails_Pennine_Way.gpx")

# load the data, showing off the ability to use queries to load subsets of the data
pennine_way = st_read("../data/National_Trails_Pennine_Way.gpx", layer="routes",
                      query="select * from routes where name='Pennine Way'")

# reproject the vector data
pennine_way_BNG = st_transform(pennine_way, crs=27700)
# create the target raster and project the elevation data into it.
bng_1km = raster(xmn=-200000, xmx=700000, ymn=0, ymx=1000000, 
                 res=1000, crs='+init=EPSG:27700')
uk_eire_elev_BNG = projectRaster(uk_eire_elev, bng_1km)

# Simplify the data
pennine_way_BNG_simple = st_simplify(pennine_way_BNG,  dTolerance=100)

# Zoom in to the whole route and plot the data
par(mfrow=c(1,2), mar=c(1,1,1,1))

plot(uk_eire_elev_BNG, xlim=c(3e5, 5e5), ylim=c(3.8e5, 6.3e5),
     axes=FALSE, legend=FALSE)
plot(st_geometry(pennine_way_BNG), add=TRUE, col='black')
plot(pennine_way_BNG_simple, add=TRUE, col='darkred')

# Add a zoom box and use that to create a new plot
zoom = extent(3.77e5, 3.89e5, 4.7e5, 4.85e5)
plot(zoom, add=TRUE)

# Zoomed in plot
plot(uk_eire_elev_BNG, ext=zoom, axes=FALSE, legend=FALSE)
plot(st_geometry(pennine_way_BNG), add=TRUE, col='black')
plot(pennine_way_BNG_simple, add=TRUE, col='darkred')

# Extract the data
pennine_way_trans = extract(uk_eire_elev_BNG, pennine_way_BNG_simple, 
                             along=TRUE, cellnumbers=TRUE)

str(pennine_way_trans)

# Here, we only have one line, so we will extract it
pennine_way_trans = pennine_way_trans[[1]]
pennine_way_trans = data.frame(pennine_way_trans)

# Get the cell coordinates 
pennine_way_xy = xyFromCell(uk_eire_elev_BNG, pennine_way_trans$cell)
pennine_way_trans = cbind(pennine_way_trans, pennine_way_xy)

# Now we can use Pythagoras to find the distance along the transect
pennine_way_trans$dx = c(0, diff(pennine_way_trans$x))
pennine_way_trans$dy = c(0, diff(pennine_way_trans$y))
pennine_way_trans$distance_from_last = with(pennine_way_trans, sqrt(dx^2 + dy^2))
pennine_way_trans$distance = cumsum(pennine_way_trans$distance_from_last)

plot(etopo_uk ~ distance, data=pennine_way_trans, type='l', 
     ylab='Elevation (m)', xlab='Distance (m)')
**********************************************************************

Testing GIS_Practical.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Error in setwd("~/Documents/CMEECourseWork/Week5/code/") : 
  cannot change working directory
Execution halted

======================================================================
======================================================================
Finished running scripts

Ran into 1 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 100

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!