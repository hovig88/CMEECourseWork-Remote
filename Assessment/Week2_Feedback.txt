Starting weekly assessment for Hovig, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 3.25 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week1, Assessment, Week2, .git, Week3

Found the following files in parent directory: .gitignore, README.md, .gitignore.save

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~
*.tmp
__pycache__/
**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
# Computational Methods in Ecology and Evolution (CMEE) Masters Program

* This repository includes weekly practicals/assignments and in-class scripts required for the partial completion of the CMEE Masters program.

* The **CMEECourseWork-Remote** directory contains a `.gitignore` file and subdirectories named as `Week1`, `Week2`,...etc. This will be updated weekly as the course progresses. 

## Contents

### Week 1

This directory includes code and data related to the first week's practicals/assignments and in-class scripts. 

In the first week, the following sections were covered:

* Unix
* Shell scripting
* Version control with Git
* Scientific documents with LaTeX

### Week 2

This directory includes code and data related to the second week's practicals/assignments and in-class scripts. 

In the second week, the following sections were covered:

* Biological computing in Python I

## Authors

Jedi (in training): Hovig Artinian

Academic email: ha819@ic.ac.uk

Personal email: artinianhovig@gmail.com

## License

None

## Acknowledgements

I would like to thank Master Jedi Samraat Pawar for accepting me as his young padawan.
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 3 weekly directories: Week1, Week2, Week3

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: code, sandbox, data, results

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
# Week 2: CMEE Bootcamp: Intro to Biological Computing in Python

* The second week was an introduction to the Python program language. It covered from performing simple operations to writing scripts and programs.

* The **Week2** directory includes the following subdirectories: *code*, *data*, *results*, and *sandbox*.
    - code - includes all the Week 2 practicals/assignments and in-class scripts
    - data - includes the data needed as inputs for some of the scripts/commands
    - results - essentially an empty directory, but includes a .gitignore file (since completely empty directories cannnot be pushed to git)
    - sandbox - similar to a recycle bin; disposing files that are not needed for assessment, but might still be useful for the author if and when needed

## Contents

### Code

* align_seqs_fasta.py - aligns input fasta files and outputs the best alignment along with its score to a text file
* align_seqs.py - aligns two short sequences and outputs the best alignment along with its score to a text file
* basic_csv.py - running and handling csv files
* basic_io1.py - importing/exporting data
* basic_io2.py - importing/exporting data
* basic_io3.py - importing/exporting data
* boilerplate.py - basic python program format
* cfexercises1.py - different functions that perform conditionals with numerical operations
* cfexercises2.py - working with loops and conditionals combined
* control_flow.py - python program that shows basic control flows of programs
* debugme.py - small script that includes a bug that needs to be fixed
* dictionary.py - populates a dictionary by mapping order names to sets of taxa
* lc1.py - creates three different lists containing the latin names, common names, and mean body masses for each species in birds, respectively, using list comprehensions, as well as conventional for loops
* lc2.py - creates two different lists of month,rainfall tuples where the amount of rain was greater than 100mm and less than 50mm, respectively, using list comprehensions, as well as conventional for loops
* loops.py - working with loops
* oaks_debugme.py - python program that loops over a csv file and writes the tree species that belong to the oak tree family into a new csv file
* oaks.py - finds those taxa that are oak trees from a list of species
* scope.py - shows the different usage of local and global variables
* sysargv.py - small script to explain the concept of sys.argv
* test_control_flow.py - similar to control_flow.py, in addition to using doctests
* tuple.py - takes a tuple and outputs the rows in separate blocks according to species
* using_name.py - small script to explain why we put __name__ = "__main__"

### Data

* fasta - directory that includes 3 fasta files needed for the `align_seqs_fasta.py` script
* TestOaksData.csv - input file for the `oaks_debugme.py` program containing a list of of tree species
* bodymass.csv - output csv file by `basic_csv.py` script
* seq.csv - input csv file containing two DNA sequences needed for `align_seqs.py` program
* testcsv.csv - input csv file for `basic_csv.py` script

## Authors

Jedi (in training): Hovig Artinian

Academic email: ha819@ic.ac.uk

Personal email: artinianhovig@gmail.com

## License

None

## Acknowledgements

Second week of Jedi training completed!
**********************************************************************

Found following files in results directory: JustOaksData.csv, best_result.txt, .gitignore, best_result_fasta.txt, best_result_better.txt...
ideally, Results directory should be empty other than, perhaps, a readme. 

Found 23 code files: lc2.py, boilerplate.py, basic_csv.py, cfexercises2.py, align_seqs_better.py, dictionary.py, debugme.py, scope.py, basic_io3.py, cfexercises1.py, tuple.py, lc1.py, oaks_debugme.py, oaks.py, loops.py, using_name.py, align_seqs.py, basic_io2.py, sysargv.py, align_seqs_fasta.py, control_flow.py, test_control_flow.py, basic_io1.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file lc2.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""This Python script creates two different lists of month,rainfall tuples where the amount of rain was greater 
than 100mm and less than 50mm, respectively, using list comprehensions, as well as conventional for loops."""

__appname__ = 'lc2.py'
__author__ = 'Hovig Artinian (ha819@imperial.ac.uk)'
__version__ = '0.0.1'
__license__ = 'None'

# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

#(1) > 100mm
greater_than_100 = [i for i in rainfall if i[1] > 100]
#(2) < 50mm
less_than_50 = [i[0] for i in rainfall if i[1] < 50]

print("Using list comprehensions:")
print("Greater than 100:")
print(greater_than_100)
print("Less than 100:")
print(less_than_50)
print("")

#(3) using for loops
greater_than_100 = []
for i in rainfall:
    if i[1] > 100:
        greater_than_100.append(i)

less_than_50 = []
for i in rainfall:
    if i[1] < 50:
        less_than_50.append(i[0])

print("Using conventional for loops:")
print("Greater than 100:")
print(greater_than_100)
print("Less than 100:")
print(less_than_50)
print("")

print("We get the same output as expected!")
**********************************************************************

Testing lc2.py...

lc2.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
Using list comprehensions:
Greater than 100:
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
Less than 100:
['MAR', 'SEP']

Using conventional for loops:
Greater than 100:
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
Less than 100:
['MAR', 'SEP']

We get the same output as expected!

**********************************************************************

Code ran without errors

Time consumed = 0.02572s

======================================================================
Inspecting script file boilerplate.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Description of this program or application.
    You can use several lines"""

__appname__ = '[application name here]'
__author__ = 'Your Name (your@email.address)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

## imports ##
import sys # module to interface our program with the operating system

## constants ##


## functions ##
def main(argv):
    """ Main entry point of the program """
    print('This is a boilerplate') # NOTE: indented using two tabs or 4 spaces
    return 0

if __name__ == "__main__":
    """Makes sure the "main" function is called from command line"""
    status = main(sys.argv)
    sys.exit(status)

**********************************************************************

Testing boilerplate.py...

boilerplate.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
This is a boilerplate

**********************************************************************

Code ran without errors

Time consumed = 0.02803s

======================================================================
Inspecting script file basic_csv.py...

File contents are:
**********************************************************************
import csv

# Read a file containing:
# 'Species','Infraorder','Family','Distribution','Body mass male (Kg)'
f = open('../data/testcsv.csv','r')

csvread = csv.reader(f)
temp = []
for row in csvread:
    temp.append(tuple(row))
    print(row)
    print("The species is", row[0])

f.close()

# write a file containing only species name and Body mass
f = open('../data/testcsv.csv','r')
g = open('../data/bodymass.csv','w')

csvread = csv.reader(f)
csvwrite = csv.writer(g)
for row in csvread:
    print(row)
    csvwrite.writerow([row[0], row[4]])

f.close()
g.close()
**********************************************************************

Testing basic_csv.py...

basic_csv.py is a Python script file;
 checking for docstrings...

Found no doctrings!
1 pt deducted

Current Points = 99

Output (only first 500 characters): 

**********************************************************************
['Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)']
The species is Species
['Daubentonia_madagascariensis', 'Chiromyiformes ', 'Daubentoniidae', 'Madagascar', '2.7']
The species is Daubentonia_madagascariensis
['Allocebus_trichotis', 'Lemuriformes', 'Cheirogaleidae', 'Madagascar', '0.1']
The species is Allocebus_trichotis
['Avahi_laniger', 'Lemuriformes', 'Indridae', 'America', '1.03']
The species is Avahi_laniger
['Avahi_occidentalis', 'Lemuriformes', 'Indridae', 'Madagasc
**********************************************************************

Code ran without errors

Time consumed = 0.02904s

======================================================================
Inspecting script file cfexercises2.py...

File contents are:
**********************************************************************
for j in range(12):
    if j % 3 == 0:
        print('hello')

for j in range(15):
    if j % 5 == 3:
        print('hello')
    elif j % 4 == 3:
        print('hello')

z = 0
while z != 15:
    print('hello')
    z = z + 3

z = 12
while z < 100:
    if z == 31:
        for k in range(7):
            print('hello')
    elif z == 18:
        print('hello')
    z = z + 1
    **********************************************************************

Testing cfexercises2.py...

cfexercises2.py is a Python script file;
 checking for docstrings...

Found no doctrings!
1 pt deducted

Current Points = 98

Output (only first 500 characters): 

**********************************************************************
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello

**********************************************************************

Code ran without errors

Time consumed = 0.03207s

======================================================================
Inspecting script file align_seqs_better.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""This Python script takes two explicit input files and saves their best 
alignment along with the corresponding score in a text file. If there are 
multiple best alignments, then it saves them all in separate text files"""

__appname__ = 'align_seqs_better.py'
__author__ = 'Hovig Artinian (ha819@imperial.ac.uk)'
__version__ = '0.0.1'
__license__ = 'None'

## imports ##
import sys # module to interface our program with the operating system
from align_seqs import calculate_score as cs
from align_seqs_fasta import inputs
import pickle

## constants ##

seq1, seq2 = inputs(sys.argv)

# Assign the longer sequence s1, and the shorter to s2
# l1 is length of the longest, l2 that of the shortest
seq1 = seq1.readlines()[1:]
seq2 = seq2.readlines()[1:]

seq1 = ''.join(seq1)
seq2 = ''.join(seq2)

seq1 = seq1.replace("\n", "")
seq2 = seq2.replace("\n", "")

l1 = len(seq1)
l2 = len(seq2)
if l1 >= l2:
    s1 = seq1
    s2 = seq2
else:
    s1 = seq2
    s2 = seq1
    l1, l2 = l2, l1 # swap the two lengths

# now try to find the best match (highest score) for the two sequences
my_best_align = None
my_best_score = -1

for i in range(l1): # Note that you just take the last alignment with the highest score
    z = cs(s1, s2, l1, l2, i)
    if z > my_best_score:
        my_best_align = "." * i + s2 # think about what this is doing!
        my_best_score = z 
    best_align = my_best_align
    seq1 = s1
    best_score = my_best_score
    with open("../results/best_result_better.txt", 'w') as file:
        file.write("The best alignments are: " + '\n' + best_align + '\n' 
        + seq1 + '\n' + "Score: " + str(best_score) + '\n') 
**********************************************************************

Testing align_seqs_better.py...

align_seqs_better.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
No input files provided... taking default files...
No input files provided... taking default files...

**********************************************************************

Code ran without errors

Time consumed = 8.95614s

======================================================================
Inspecting script file dictionary.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""This Python script populates a dictionary by mapping order names to sets of taxa"""

__appname__ = 'dictionary.py'
__author__ = 'Hovig Artinian (ha819@imperial.ac.uk)'
__version__ = '0.0.1'
__license__ = 'None'

taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]

taxa_dic={}
x = 0
for row in taxa:
        if row[1] not in taxa_dic.keys():
                taxa_dic[row[1]] = []
                x = x +1

        for key in taxa_dic.keys():
                if key == row[1]:
                        taxa_dic[key].append(row[0])

print("Order Names : Taxa")
for key,val in taxa_dic.items():
        print(key, ": ", val)
**********************************************************************

Testing dictionary.py...

dictionary.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
Order Names : Taxa
Carnivora :  ['Lyacon pictus', 'Arctocephalus gazella', 'Canis lupus']
Rodentia :  ['Gerbillus henleyi', 'Peromyscus crinitus', 'Mus domesticus', 'Cleithrionomys rutilus']
Chiroptera :  ['Myotis lucifugus']
Afrosoricida :  ['Microgale dobsoni', 'Microgale talazaci']

**********************************************************************

Code ran without errors

Time consumed = 0.02502s

======================================================================
Inspecting script file debugme.py...

File contents are:
**********************************************************************
def makeabug(x):
    y = x**4
    z = 0.
    y = y/z
    return y

makeabug(25)**********************************************************************

Testing debugme.py...

debugme.py is a Python script file;
 checking for docstrings...

Found no doctrings!
1 pt deducted

Current Points = 97

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "debugme.py", line 7, in <module>
    makeabug(25)
  File "debugme.py", line 4, in makeabug
    y = y/z
ZeroDivisionError: float division by zero

======================================================================
Inspecting script file scope.py...

File contents are:
**********************************************************************
#1
_a_global = 10 # a global variable

if _a_global > 5:
    _b_global = _a_global + 5 # also a global variable

def a_function():
    _a_global = 5 # a local variable
    
    if _a_global >= 5:
        _b_global = _a_global + 5 # also a local variable
    
    _a_local = 4
    
    print("Inside the function, the value of _a_global is ", _a_global)
    print("Inside the function, the value of _b_global is ", _b_global)
    print("Inside the function, the value of _a_local is ", _a_local)
    
    return None

a_function()

print("Outside the function, the value of _a_global is ", _a_global)
print("Outside the function, the value of _b_global is ", _b_global)

#2
_a_global = 10

def a_function():
    _a_local = 4
    
    print("Inside the function, the value _a_local is ", _a_local)
    print("Inside the function, the value of _a_global is ", _a_global)
    
    return None

a_function()

print("Outside the function, the value of _a_global is", _a_global)

#3
_a_global = 10

print("Outside the function, the value of _a_global is", _a_global)

def a_function():
    global _a_global
    _a_global = 5
    _a_local = 4
    
    print("Inside the function, the value of _a_global is ", _a_global)
    print("Inside the function, the value _a_local is ", _a_local)
    
    return None

a_function()

print("Outside the function, the value of _a_global now is", _a_global)

#4
def a_function():
    _a_global = 10

    def _a_function2():
        global _a_global
        _a_global = 20
    
    print("Before calling a_function, value of _a_global is ", _a_global)

    _a_function2()
    
    print("After calling _a_function2, value of _a_global is ", _a_global)

a_function()

print("The value of a_global in main workspace / namespace is ", _a_global)

#5
_a_global = 10

def a_function():

    def _a_function2():
        global _a_global
        _a_global = 20
    
    print("Before calling a_function, value of _a_global is ", _a_global)

    _a_function2()
    
    print("After calling _a_function2, value of _a_global is ", _a_global)

a_function()

print("The value of a_global in main workspace / namespace is ", _a_global)
**********************************************************************

Testing scope.py...

scope.py is a Python script file;
 checking for docstrings...

Found no doctrings!
1 pt deducted

Current Points = 96

Output (only first 500 characters): 

**********************************************************************
Inside the function, the value of _a_global is  5
Inside the function, the value of _b_global is  10
Inside the function, the value of _a_local is  4
Outside the function, the value of _a_global is  10
Outside the function, the value of _b_global is  15
Inside the function, the value _a_local is  4
Inside the function, the value of _a_global is  10
Outside the function, the value of _a_global is 10
Outside the function, the value of _a_global is 10
Inside the function, the value of _a_global is  
**********************************************************************

Code ran without errors

Time consumed = 0.03430s

======================================================================
Inspecting script file basic_io3.py...

File contents are:
**********************************************************************
#############################
# STORING OBJECTS
#############################
# To save an object (even complex) for later use
my_dictionary = {"a key": 10, "another key": 11}

import pickle

f = open('../sandbox/testp.p','wb') ## note the b: accept binary files
pickle.dump(my_dictionary, f)
f.close()

## Load the data again
f = open('../sandbox/testp.p','rb')
another_dictionary = pickle.load(f)
f.close()

print(another_dictionary)
**********************************************************************

Testing basic_io3.py...

basic_io3.py is a Python script file;
 checking for docstrings...

Found no doctrings!
1 pt deducted

Current Points = 95

Output (only first 500 characters): 

**********************************************************************
{'a key': 10, 'another key': 11}

**********************************************************************

Code ran without errors

Time consumed = 0.06596s

======================================================================
Inspecting script file cfexercises1.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Some functions showing different usage of conditionals with numerical operations"""

__appname__ = 'cfexercises1.py'
__author__ = 'Hovig Artinian (ha819@imperial.ac.uk)'
__version__ = '0.0.1'
__license__ = 'None'

## imports ##
import sys # module to interface our program with the operating system

## constants ##

## functions ##

def foo_1(x):
    """This function takes an input number and returns its 0.5th power"""
    return x ** 0.5

def foo_2(x, y):
    """This function takes two input numbers and returns the higher one"""
    if x > y:
        return x
    return y

def foo_3(x, y, z):
    """This function takes three input numbers and switches their values 
    when the one on the left is higher than the one on the right"""
    if x > y:
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    return [x, y, z]

def foo_4(x):
    """This function takes an input number and computes the factorial 
    by multiplying consecutive numbers in an increasing order"""
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result

def foo_5(x): # a recursive function that calculates the factorial of x
    """This function takes an input number and computes the factorial recursively"""
    if x == 1:
        return 1
    return x * foo_5(x - 1)

def foo_6(x): # Calculate the factorial of x in a different way
    """This function takes an input number and computes the factorial 
    by multiplying consecutive numbers in a decreasing order"""
    facto = 1
    while x>= 1:
        facto = facto * x
        x = x - 1
    return facto

def main(argv):
    print("foo_1 test input: 2")
    print("foo_1 test result: " + str(foo_1(2)) + "\n")
    print("foo_2 test inputs: 33, 23")
    print("foo_2 test result: " + str(foo_2(33, 23)) + "\n")
    print("foo_3 test input: [120, 5, 2]")
    print("foo_3 test result: " + str(foo_3(120, 5, 2)) + "\n")
    print("foo_4 test input: 4")
    print("foo_4 test result: " + str(foo_4(4)) + "\n")
    print("foo_5 test input: 3")
    print("foo_5 test result: " + str(foo_5(3)) + "\n")
    print("foo_6 test input: 5")
    print("foo_6 test result: " + str(foo_6(5)))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing cfexercises1.py...

cfexercises1.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
foo_1 test input: 2
foo_1 test result: 1.4142135623730951

foo_2 test inputs: 33, 23
foo_2 test result: 33

foo_3 test input: [120, 5, 2]
foo_3 test result: [5, 2, 120]

foo_4 test input: 4
foo_4 test result: 24

foo_5 test input: 3
foo_5 test result: 6

foo_6 test input: 5
foo_6 test result: 120

**********************************************************************

Code ran without errors

Time consumed = 0.03032s

======================================================================
Inspecting script file tuple.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""This Python script takes a tuple and outputs the rows in separate blocks according to species."""

__appname__ = 'tuple.py'
__author__ = 'Hovig Artinian (ha819@imperial.ac.uk)'
__version__ = '0.0.1'
__license__ = 'None'

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

x = 1
for row in birds:
    print("Species " + str(x) + ":")
    print(row[0] + ", " + row[1] + ", " + str(row[2]))
    print()
    x = x + 1**********************************************************************

Testing tuple.py...

tuple.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
Species 1:
Passerculus sandwichensis, Savannah sparrow, 18.7

Species 2:
Delichon urbica, House martin, 19

Species 3:
Junco phaeonotus, Yellow-eyed junco, 19.5

Species 4:
Junco hyemalis, Dark-eyed junco, 19.6

Species 5:
Tachycineata bicolor, Tree swallow, 20.2


**********************************************************************

Code ran without errors

Time consumed = 0.02788s

======================================================================
Inspecting script file lc1.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""This Python script creates three different lists containing the latin names, common names, and mean body masses 
for each species in birds, respectively, using list comprehensions, as well as conventional for loops"""

__appname__ = 'lc1.py'
__author__ = 'Hovig Artinian (ha819@imperial.ac.uk)'
__version__ = '0.0.1'
__license__ = 'None'

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

#(1) List Comprehensions
latin_names = [row[0] for row in birds] # outputs the first element of each row in a list
common_names = [row[1] for row in birds] # outputs the second element of each row in a list
body_masses = [row[2] for row in birds] # outputs the third element of each row in a list

print("Using list comprehensions:")
print("Latin Names:")
print(latin_names)
print("Common Names:")
print(common_names)
print("Mean Body Masses:")
print(body_masses)
print("")

#(2) Conventional For Loops
latin_names = []
common_names = []
body_masses = []

for row in birds:
    latin_names.append(row[0])

for row in birds:
    common_names.append(row[1])

for row in birds:
    body_masses.append(row[2])

print("Using conventional for loops:")
print("Latin Names:")
print(latin_names)
print("Common Names:")
print(common_names)
print("Mean Body Masses:")
print(body_masses)
print("")

print("We get the same output as expected!")
**********************************************************************

Testing lc1.py...

lc1.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
Using list comprehensions:
Latin Names:
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
Common Names:
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
Mean Body Masses:
[18.7, 19, 19.5, 19.6, 20.2]

Using conventional for loops:
Latin Names:
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
Common Names:
['Savannah sparrow', 'House
**********************************************************************

Code ran without errors

Time consumed = 0.02778s

======================================================================
Inspecting script file oaks_debugme.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

""" This Python program loops over the TestOaksData.csv file and writes the tree 
species that belong to the oak tree family into a new file JustOaksData.csv """

__appname__ = 'oaks_debugme.py'
__author__ = 'Hovig Artinian (ha819@imperial.ac.uk)'
__version__ = '0.0.1'
__license__ = 'None'

## imports ##
import csv
import sys
import doctest

## constants ##

## functions ##

# This function checks if the tree is an oak
def is_an_oak(name):
    """ Returns True if name starts with 'quercus' 

    >>> is_an_oak('quercus cerris')
    True

    >>> is_an_oak('Quercus cerris')
    True

    >>> is_an_oak('Fagus sylvatica')
    False

    >>> is_an_oak('Quercuss cerris')
    False

    >>> is_an_oak('Quercusus cerris')
    False

    """
    return name.lower().split()[0] == 'quercus'
    #if there is a typo, this function does not accept it

def main(argv):
    """ This function prints out pairs of [Genus , species], 
    specifying the ones that are oaks. It also outputs the 
    ones that are oaks into a new file """ 

    f = open('../data/TestOaksData.csv','r')
    g = open('../results/JustOaksData.csv','w')
    taxa = csv.reader(f)
    csvwrite = csv.writer(g)
    #oaks = set() - this part is commented out because it is not used
    for row in taxa:
        if 'Genus' in row:
            csvwrite.writerow([row[0], row[1]])
            continue
        print(row)
        print("The genus is: ") 
        print(row[0] + '\n')
        if is_an_oak(row[0]):
            print('FOUND AN OAK!\n')
            csvwrite.writerow([row[0], row[1]])    
    
    return 0
    
if (__name__ == "__main__"):
    status = main(sys.argv)

doctest.testmod()   # To run with embedded tests
**********************************************************************

Testing oaks_debugme.py...

oaks_debugme.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
['Quercus', ' robur']
The genus is: 
Quercus

FOUND AN OAK!

['Fraxinus', ' excelsior']
The genus is: 
Fraxinus

['Pinus', ' sylvestris']
The genus is: 
Pinus

['Quercus', ' cerris']
The genus is: 
Quercus

FOUND AN OAK!

['Quercus', ' petraea']
The genus is: 
Quercus

FOUND AN OAK!


**********************************************************************

Code ran without errors

Time consumed = 0.07053s

======================================================================
Inspecting script file oaks.py...

File contents are:
**********************************************************************
## Finds just those taxa that are oak trees from a list of species

taxa = [ 'Quercus robur',
         'Fraxinus excelsior',
         'Pinus sylvestris',
         'Quercus cerris',
         'Quercus petraea',
       ]

def is_an_oak(name):
    return name.lower().startswith('quercus ')

##Using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)
print(oaks_loops)

##Using list comprehensions   
oaks_lc = set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)

##Get names in UPPER CASE using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

##Get names in UPPER CASE using list comprehensions
oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)
**********************************************************************

Testing oaks.py...

oaks.py is a Python script file;
 checking for docstrings...

Found no doctrings!
1 pt deducted

Current Points = 94

Output (only first 500 characters): 

**********************************************************************
{'Quercus cerris', 'Quercus petraea', 'Quercus robur'}
{'Quercus cerris', 'Quercus petraea', 'Quercus robur'}
{'QUERCUS ROBUR', 'QUERCUS CERRIS', 'QUERCUS PETRAEA'}
{'QUERCUS ROBUR', 'QUERCUS CERRIS', 'QUERCUS PETRAEA'}

**********************************************************************

Code ran without errors

Time consumed = 0.05067s

======================================================================
Inspecting script file loops.py...

File contents are:
**********************************************************************
# FOR loops in Python
for i in range(5):
    print(i)

my_list = [0, 2, "geronimo!", 3.0, True, False]
for k in my_list:
    print(k)

total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print(total)

# WHILE loops in in Python
z = 0
while z < 100:
    z = z + 1
    print(z)

b = True
while b:
    print("GERONIMO! infinite loop! ctrl+c to stop!")
# ctrl + c to stop!**********************************************************************

Testing loops.py...

loops.py is a Python script file;
 checking for docstrings...

Found no doctrings!
1 pt deducted

Current Points = 93

Output (only first 500 characters): 

**********************************************************************
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c
**********************************************************************

Code ran without errors

Time consumed = 10.27551s

======================================================================
Inspecting script file using_name.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
# Filename: using_name.py

if __name__ == '__main__':
    print('This program is being run by itself')
else:
    print('I am being imported from another module')

print("This module's name is: " + __name__)**********************************************************************

Testing using_name.py...

using_name.py is a Python script file;
 checking for docstrings...

Found no doctrings!
1 pt deducted

Current Points = 92

Output (only first 500 characters): 

**********************************************************************
This program is being run by itself
This module's name is: __main__

**********************************************************************

Code ran without errors

Time consumed = 0.07208s

======================================================================
Inspecting script file align_seqs.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

""" This Python program takes an input csv file containing two DNA sequences and 
saves their best alignment along with the corresponding score in a text file. """

__appname__ = 'align_seqs.py'
__author__ = 'Hovig Artinian (ha819@imperial.ac.uk)'
__version__ = '0.0.1'
__license__ = 'None'

## imports ##
import sys # module to interface our program with the operating system
import csv

## constants ##

with open("../data/seq.csv", 'r') as file:# csv file containing two example sequences
    seq = file.read().replace(',', '').split()

# Assign the longer sequence s1, and the shorter to s2
# l1 is length of the longest, l2 that of the shortest
l1 = len(seq[0])
l2 = len(seq[1])
if l1 >= l2:
    s1 = seq[0]
    s2 = seq[1]
else:
    s1 = seq[1]
    s2 = seq[0]
    l1, l2 = l2, l1 # swap the two lengths

## functions ##

def calculate_score(s1, s2, l1, l2, startpoint):
    """ This function computes a score by returning the number of matches 
    starting from an arbitrary startpoint (chosen by user) """
    
    matched = "" # to hold string displaying alignements
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    # some formatted output
    # print("." * startpoint + matched)           
    # print("." * startpoint + s2)
    # print(s1)
    # print(score) 
    # print(" ")

    return score

## functions ##

def main(argv):
    """ Finds the best alignment and computes the correspondong best score """
    
    # now try to find the best match (highest score) for the two sequences
    my_best_align = None
    my_best_score = -1
    
    print("Computing score of best alignment...")
    for i in range(l1): # Note that you just take the last alignment with the highest score
        z = calculate_score(s1, s2, l1, l2, i)
        if z > my_best_score:
            my_best_align = "." * i + s2 # think about what this is doing!
            my_best_score = z 
    best_align = my_best_align
    seq1 = s1
    best_score = my_best_score
    
    print("Saving the result in a text file...")
    with open("../results/best_result.txt", 'w') as file:
        file.write("The best alignment is: " + '\n' + best_align + '\n' 
        + seq1 + '\n' + "Score: " + str(best_score) + '\n')
    
    print("Done!")
    
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing align_seqs.py...

align_seqs.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
Computing score of best alignment...
Saving the result in a text file...
Done!

**********************************************************************

Code ran without errors

Time consumed = 0.04864s

======================================================================
Inspecting script file basic_io2.py...

File contents are:
**********************************************************************
#############################
# FILE OUTPUT
#############################
# Save the elements of a list to a file
list_to_save = range(100)

f = open('../sandbox/testout.txt','w')
for i in list_to_save:
    f.write(str(i) + '\n') ## Add a new line at the end

f.close()
**********************************************************************

Testing basic_io2.py...

basic_io2.py is a Python script file;
 checking for docstrings...

Found no doctrings!
1 pt deducted

Current Points = 91

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.02541s

======================================================================
Inspecting script file sysargv.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

import sys
print(sys.argv)
print("This is the name of the script: ", sys.argv[0])
print("Number of arguments: ", len(sys.argv))
print("The arguments are: ", str(sys.argv))**********************************************************************

Testing sysargv.py...

sysargv.py is a Python script file;
 checking for docstrings...

Found no doctrings!
1 pt deducted

Current Points = 90

Output (only first 500 characters): 

**********************************************************************
['sysargv.py']
This is the name of the script:  sysargv.py
Number of arguments:  1
The arguments are:  ['sysargv.py']

**********************************************************************

Code ran without errors

Time consumed = 0.02738s

======================================================================
Inspecting script file align_seqs_fasta.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""This Python script takes two explicit input files and saves their 
best alignment along with the corresponding score in a text file."""

__appname__ = 'align_seqs_fasta.py'
__author__ = 'Hovig Artinian (ha819@imperial.ac.uk)'
__version__ = '0.0.1'
__license__ = 'None'

## imports ##
import sys # module to interface our program with the operating system
from align_seqs import calculate_score as cs

## constants ##
def inputs(args):
    """ This function makes sure the script can handle 
    inputs, whether there are none, 1, 2, or more"""
    if(len(args)) == 1:
        print("No input files provided... taking default files...")
        seq1 = open("../data/fasta/407228326.fasta", "r")
        seq2 = open("../data/fasta/407228412.fasta", "r")
    elif(len(args)) == 2:
        seq1 = open(args[1], "r")
        seq2 = open("../data/fasta/407228326.fasta", "r")
    elif(len(args)) == 3:
        seq1 = open(args[1], "r")
        seq2 = open(args[2], "r")
    elif(len(args)) >= 4:
        print("More than 2 input files provided... taking first two...")
        seq1 = open(args[1], "r")
        seq2 = open(args[2], "r")
    
    return seq1, seq2

seq1, seq2 = inputs(sys.argv)
# Assign the longer sequence s1, and the shorter to s2
# l1 is length of the longest, l2 that of the shortest
seq1 = seq1.readlines()[1:]
seq2 = seq2.readlines()[1:]

seq1 = ''.join(seq1)
seq2 = ''.join(seq2)

seq1 = seq1.replace("\n", "")
seq2 = seq2.replace("\n", "")

l1 = len(seq1)
l2 = len(seq2)
if l1 >= l2:
    s1 = seq1
    s2 = seq2
else:
    s1 = seq2
    s2 = seq1
    l1, l2 = l2, l1 # swap the two lengths

# now try to find the best match (highest score) for the two sequences
my_best_align = None
my_best_score = -1

for i in range(l1): # Note that you just take the last alignment with the highest score
    z = cs(s1, s2, l1, l2, i)
    if z > my_best_score:
        my_best_align = "." * i + s2 # think about what this is doing!
        my_best_score = z 
best_align = my_best_align
seq1 = s1
best_score = my_best_score
with open("../results/best_result_fasta.txt", 'w') as file:
    file.write("The best alignment is: " + '\n' + best_align + '\n' 
    + seq1 + '\n' + "Score: " + str(best_score) + '\n') 
**********************************************************************

Testing align_seqs_fasta.py...

align_seqs_fasta.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
No input files provided... taking default files...

**********************************************************************

Code ran without errors

Time consumed = 4.84136s

======================================================================
Inspecting script file control_flow.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.
__author__ = 'Samraat Pawar (s.pawar@imperial.ac.uk)'
__version__ = '0.0.1'

## imports ##
import sys # module to interface our program with the operating system

## constants ##


## functions ##
def even_or_odd(x=0): # if not specified, x should take value 0.

    """Find whether a number x is even or odd."""
    if x % 2 == 0: #The conditional if
        return "%d is Even!" % x
    return "%d is Odd!" % x

def largest_divisor_five(x=120):
    """Find which is the largest divisor of x among 2,3,4,5."""
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0: #means "else, if"
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else: # When all other (if, elif) conditions are not met
        return "No divisor found for %d!" % x # Each function can return a value or a variable.
    return "The largest divisor of %d is %d" % (x, largest)

def is_prime(x=70):
    """Find whether an integer is prime."""
    for i in range(2, x): #  "range" returns a sequence of integers
        if x % i == 0:
          print("%d is not a prime: %d is a divisor" % (x, i)) 
          return False
    print("%d is a prime!" % x)
    return True 

def find_all_primes(x=22):
    """Find all the primes up to x"""
    allprimes = []
    for i in range(2, x + 1):
      if is_prime(i):
        allprimes.append(i)
    print("There are %d primes between 2 and %d" % (len(allprimes), x))
    return allprimes

def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing control_flow.py...

control_flow.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
22 is Even!
33 is Odd!
The largest divisor of 120 is 5
No divisor found for 121!
60 is not a prime: 2 is a divisor
False
59 is a prime!
True
2 is a prime!
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is 
**********************************************************************

Code ran without errors

Time consumed = 0.02932s

======================================================================
Inspecting script file test_control_flow.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""

__author__ = 'Hovig Artinian (ha819@imperial.ac.uk)'
__version__ = '0.0.1'

## imports ##
import sys # module to interface our program with the operating system
import doctest # Import the doctest module

## constants ##


## functions ##
def even_or_odd(x=0): # if not specified, x should take value 0.
    """Find whether a number x is even or odd.

    >>> even_or_odd(10)
    '10 is Even!'

    >>> even_or_odd(5)
    '5 is Odd!'

    whenever a float is provided, then the closest integer is used:
    >>> even_or_odd(3.2)
    '3 is Odd!'

    in case of negative numbers, the positive is taken:
    >>> even_or_odd(-2)
    '-2 is Even!'

    """
    #Define function to be tested
    if x % 2 == 0:
        return "%d is Even!" % x
    return "%d is Odd!" % x

####### I SUPPRESSED THIS BLOCK: WHY? #######

# def main(argv): 
#     print even_or_odd(22)
#     print even_or_odd(33)
#     return 0

# if (__name__ == "__main__"):
#     status = main(sys.argv)
############################################

doctest.testmod()   # To run with embedded tests
**********************************************************************

Testing test_control_flow.py...

test_control_flow.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.06994s

======================================================================
Inspecting script file basic_io1.py...

File contents are:
**********************************************************************
#############################
# FILE INPUT
#############################
# Open a file for reading
f = open('../sandbox/test.txt', 'r')
# use "implicit" for loop:
# if the object is a file, python will cycle over lines
for line in f:
    print(line)

# close the file
f.close()

# Same example, skip blank lines
f = open('../sandbox/test.txt', 'r')
for line in f:
    if len(line.strip()) > 0:
        print(line)

f.close()
**********************************************************************

Testing basic_io1.py...

basic_io1.py is a Python script file;
 checking for docstrings...

Found no doctrings!
1 pt deducted

Current Points = 89

Output (only first 500 characters): 

**********************************************************************
First Line

Second Line



Third Line



Fourth Line

First Line

Second Line

Third Line

Fourth Line


**********************************************************************

Code ran without errors

Time consumed = 0.02663s

======================================================================
======================================================================
Finished running scripts

Ran into 1 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 89

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!