Starting weekly assessment for Hovig, Week1

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 137.28 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week6, Week1, Week7, Assessment, Week10, Week5, Week2, Week9, Week4, .git, Week3, MiniProject

Found the following files in parent directory: .gitignore, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~
*.tmp
__pycache__/

# History files
.Rhistory
.Rapp.history

# Session Data files
.RData

# User-specific files
.Ruserdata

# Example code in package build process
*-Ex.R

# Output files from R CMD build
/*.tar.gz

# Output files from R CMD check
/*.Rcheck/

# RStudio files
.Rproj.user/

# produced vignettes
vignettes/*.html
vignettes/*.pdf

# OAuth2 token, see https://github.com/hadley/httr/releases/tag/v0.3
.httr-oauth

# knitr and R markdown default cache directories
*_cache/
/cache/

# Temporary files created by R markdown
*.utf8.md
*.knit.md
**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
# Computational Methods in Ecology and Evolution (CMEE) Masters Program

* This repository includes weekly practicals/assignments and in-class scripts required for the partial completion of the CMEE Masters program.

* The **CMEECourseWork-Remote** directory contains a `.gitignore` file and subdirectories named as `Week1`, `Week2`,...etc. This will be updated weekly as the course progresses. 

## Contents

### Week 1

This directory includes code and data related to the first week's practicals/assignments and in-class scripts. 

In the first week, the following sections were covered:

* Unix
* Shell scripting
* Version control with Git
* Scientific documents with LaTeX

### Week 2

This directory includes code and data related to the second week's practicals/assignments and in-class scripts. 

In the second week, the following sections were covered:

* Biological computing in Python I

### Week 3

This directory includes code and data related to the third week's practicals/assignments and in-class scripts. 

In the third week, the following sections were covered:

* Biological Computing in R

### Week 4

This directory includes code and data related to the fourth week's practicals/assignments and in-class scripts. 

In the fourth week, the following sections were covered:

* Statistics in R
* CMEE Miniproject Start

### Week 5

This directory includes code and data related to the fifth week's practicals/assignments and in-class scripts. 

In the fifth week, the following sections were covered:

* Statistics in R
* Spatial Analyses and GIS
* CMEE Miniproject Start

### Week 6

This directory includes code and data related to the sixth week's practicals/assignments and in-class scripts. 

In the sixth week, the following sections were covered:

* Genomics and Bioinformatics

### Week 7

This directory includes code and data related to the seventh week's practicals/assignments and in-class scripts. 

In the seventh week, the following sections were covered:

* Biological Computing in Python II

### MiniProject (Week 8)

This directory includes code and data related to the eighth week's practicals/assignments and in-class scripts. 

In the eighth week, the following sections were covered:

* CMEE Miniproject: Hackathon

### Week 9

This directory includes code and data related to the ninth week's practicals/assignments and in-class scripts. 

In the ninth week, the following sections were covered:

* High Performance Computing

### Week 10

This directory includes code and data related to the tenth week's practicals/assignments and in-class scripts. 

In the tenth week, the following sections were covered:

* Biological Data Structures and C

## Authors

Jedi (in training): Hovig Artinian

Academic email: ha819@ic.ac.uk

Personal email: artinianhovig@gmail.com

## License

None

## Acknowledgements

I would like to thank Master Jedi Samraat Pawar for accepting me as his young padawan.
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 9 weekly directories: Week1, Week10, Week2, Week3, Week4, Week5, Week6, Week7, Week9

The Week1 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK1...

Found the following directories: code, sandbox, data, results

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
# Week 1: Course Induction & CMEE Bootcamp Intro

* The first week was an induction to the CMEE Masters program and an introduction to the Unix environment, shell scripting, version control with git, and typesetting with LaTeX.

* The **Week1** directory includes the following subdirectories: *code*, *data*, *results*, and *sandbox*.
    - code - includes all the Week 1 practicals/assignments and in-class scripts
    - data - includes the data needed as inputs for some of the scripts/commands
    - results - essentially an empty directory, but includes a .gitignore file (since completely empty directories cannnot be pushed to git)
    - sandbox - similar to a recycle bin; disposing files that are not needed for assessment, but might still be useful for the author if and when needed

## Contents

### Code

#### Unix

* UnixPrac1.txt - includes 5 single-line commands answering the fasta exercise questions

#### Shell scripting

* boilerplate.sh - prints a simple sentence
* ConcatenateTwoFiles.sh - merges two input files into one
* CountLines.sh - counts the number of lines of an input file
* csvtospace.sh - converts an input csv delimited file to space delimited
* MyExampleScript.sh - shows the basic usage of variables
* tabtocsv.sh - converts an input tab delimited file to comma delimited
* tiff2png.sh - converts all tiff files to png
* variables.sh - another demonstration of basic usage of variables

#### Scientific documents with LaTeX

* CompileLaTeX.sh - compiles an input LaTeX file into a pdf
* FirstBiblio.bib - BibTeX file (reference) needed to compile the pdf file
* FirstExample.tex - LaTeX format file that serves as an input for `CompileLaTeX.sh` script

### Data

* fasta - directory that includes 3 fasta files needed for the `UnixPrac1.txt` file (fasta exercise)
* Temperatures - directory that includes 4 csv input files used for `csvtospace.sh` script

## Authors

Jedi (in training): Hovig Artinian

Academic email: ha819@ic.ac.uk

Personal email: artinianhovig@gmail.com

## License

None

## Acknowledgements

First week of Jedi training completed!
**********************************************************************

Found following files in results directory: .gitignore...

Found 13 code files: ConcatenateTwoFiles.sh, CountLines.sh, variables.sh, CompileLaTeX.sh, tiff2png.sh, csvtospace.sh, FirstExample.tex, MyExampleScript.sh, FirstBiblio.bib, UnixPrac1.txt, tabtocsv.sh, .txt.txt, boilerplate.sh

Found the following extra files: .csv.csv
0.5 pt deducted per extra file

Current Points = 99.5

======================================================================
Testing script/code files...

======================================================================
Inspecting script file ConcatenateTwoFiles.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Hovig Artinian ha819@imperial.ac.uk
# Script: ConcatenateTwoFiles.sh
# Desc: concatenates two files together
# Arguments: 1 -> input file 1; 2 -> input file 2; 3 -> merged file
# Date: Oct 2019

# handling input parameters
if [ -z $1 ] || [ -z $2 ] || [ -z $3 ]
then 
    echo "Please input 3 file names..."
    echo "Script did not execute." 
    exit 
fi

cat $1 > $3 # adds contents of file 1 to empty file 3
cat $2 >> $3 # appends contents of file 2 to file 3
echo -e "\nMerged File is:\n"
cat $3 # prints out contents of file 3
echo -e "\n"
**********************************************************************

Testing ConcatenateTwoFiles.sh...

Output (only first 500 characters): 

**********************************************************************
Please input 3 file names...
Script did not execute.

**********************************************************************

Code ran without errors

Time consumed = 0.00675s

======================================================================
Inspecting script file CountLines.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Hovig Artinian ha819@imperial.ac.uk
# Script: CountLines.sh
# Desc: counts the number of lines in a file
# Arguments: 1 -> input file
# Date: Oct 2019

# handling input parameters
if [ -z $1 ]
then 
    echo "Please input a file name..."
    echo "Script did not execute."
    exit 
fi

NumLines=`wc -l < $1` # counts number of lines and stores value in NumLines
filename=`basename $1`

echo -e "\nThe file ${filename} has $NumLines lines.\n"
**********************************************************************

Testing CountLines.sh...

Output (only first 500 characters): 

**********************************************************************
Please input a file name...
Script did not execute.

**********************************************************************

Code ran without errors

Time consumed = 0.00678s

======================================================================
Inspecting script file variables.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Hovig Artinian ha819@imperial.ac.uk
# Script: variables.sh
# Desc: using and reading variables in different ways
# Arguments: none
# Date: Oct 2019

# Shows the use of variables
MyVar="some string"
echo "the current value of the variable is:" $MyVar
echo "Please enter a new string"
read MyVar

if [ -z $MyVar ]
then
    echo -e "No input string provided...\n"
else
    echo "the current value of the variable is:" $MyVar
fi

## Reading multiple values
echo -e "\nEnter two numbers separated by space(s)"
read a b

if [ -z $a ] || [ -z $b ]
then
    echo "There were no input numbers provided..." 
    echo "No calculation occured."
    exit
else
    echo "you entered" $a "and" $b ". Their sum is:"
    mysum=`expr $a + $b`
    echo $mysum
fi
**********************************************************************

Testing variables.sh...

Output (only first 500 characters): 

**********************************************************************
the current value of the variable is: some string
Please enter a new string
No input string provided...


Enter two numbers separated by space(s)
There were no input numbers provided...
No calculation occured.

**********************************************************************

Code ran without errors

Time consumed = 0.00517s

======================================================================
Inspecting script file CompileLaTeX.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Hovig Artinian ha819@imperial.ac.uk
# Script: CompileLaTeX.sh
# Desc: converts latex files to pdf
# Arguments: 1 -> latex file
# Date: Oct 2019

# handling input parameters
if [ -z $1 ]
then 
    echo "Please input a file name..."
    echo "Script did not execute."
    exit 
fi

# 
if [[ $1 ==  *".tex"* ]]
then 
    echo "Please input the file name without the extension..."
    echo "Script did not execute."
    exit
fi

pdflatex $1.tex
pdflatex $1.tex
bibtex $1
pdflatex $1.tex
pdflatex $1.tex

## Cleanup
rm -f *~
rm -f *.aux
rm -f *.bbl
rm -f *.blg
rm -f *.dvi
rm -f *.log
rm -f *.nav
rm -f *.out
rm -f *.snm
rm -f *.toc

# -f flag ignores nonexistent files and arguments

# move pdf file to appropriate directory
mv $1.pdf ../results
**********************************************************************

Testing CompileLaTeX.sh...

Output (only first 500 characters): 

**********************************************************************
Please input a file name...
Script did not execute.

**********************************************************************

Code ran without errors

Time consumed = 0.00819s

======================================================================
Inspecting script file tiff2png.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Hovig Artinian ha819@imperial.ac.uk
# Script: tiff2png.sh
# Desc: converts tiff files to png
# Arguments: none
# Date: Oct 2019

# check if there are any tiff files in the current directory
A=`find . -type f -name "*.tif" | wc -l` # the value of A will be 0 if there are no tiff files in the current directory

if [ $A ]
then
	echo "No TIFF files detected..."
	echo "Script did not execute."
	exit
fi

for f in *.tif;
	do
		echo "Converting $f";
		convert "$f" "$(basename "$f" .tif).jpg";
	done

**********************************************************************

Testing tiff2png.sh...

Output (only first 500 characters): 

**********************************************************************
No TIFF files detected...
Script did not execute.

**********************************************************************

Code ran without errors

Time consumed = 0.00780s

======================================================================
Inspecting script file csvtospace.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Hovig Artinian ha819@imperial.ac.uk
# Script: csvtospace.sh
# Description: substitute the commas in the files with spaces
#
# Saves the output into a .txt file
# Arguments: 1 -> csv delimited file
# Date: Oct 2019

# handling input parameters
if [ -z $1 ]
then 
    echo "Please input a file name..."
    echo "Script did not execute."
    exit 
fi

filename=`basename $1`

echo "Creating a space separated version of $filename..."
cat $1 | tr -s "," " " > $filename.txt # tr -s replaces commas with spaces; even repeated commas are replaced by one space only
echo "Done!"

for file in $filename.txt
do
    mv "$file" "$(basename "$file" .csv.txt).txt" # fixing the file extension from .csv.txt to just .txt
done

**********************************************************************

Testing csvtospace.sh...

Output (only first 500 characters): 

**********************************************************************
Please input a file name...
Script did not execute.

**********************************************************************

Code ran without errors

Time consumed = 0.00824s

======================================================================
Inspecting script file FirstExample.tex...

File contents are:
**********************************************************************
\documentclass[12pt]{article}

\title{A Simple Document}

\author{Hovig Artinian}

\date{October 2019}

\begin{document}
    \maketitle

    \begin{abstract}
        This paper must be cool!
    \end{abstract}

    \section{Introduction}
    	Blah Blah!

    \section{Materials \& Methods}
    One of the most famous equations is:
    \begin{equation}
	    E =  mc^2
    \end{equation}
    This equation was first proposed by Einstein in 1905
    \cite{einstein1905does}.
    
    \bibliographystyle{plain}
    \bibliography{FirstBiblio}
\end{document}
**********************************************************************

Testing FirstExample.tex...

======================================================================
Inspecting script file MyExampleScript.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Hovig Artinian ha819@imperial.ac.uk
# Script: MyExampleScript.sh
# Desc: assigning variables and printing them in various ways
# Arguments: none
# Date: Oct 2019

msg1="Hello"
msg2=$USER
echo -e "\n$msg1 $msg2"
echo "Hello $USER"
echo
**********************************************************************

Testing MyExampleScript.sh...

Output (only first 500 characters): 

**********************************************************************

Hello mhasoba
Hello mhasoba


**********************************************************************

Code ran without errors

Time consumed = 0.00440s

======================================================================
Inspecting script file FirstBiblio.bib...

File contents are:
**********************************************************************
@article{einstein1905does,
  title={Does the inertia of a body depend upon its energy-content},
  author={Einstein, Albert},
  journal={Annalen der Physik},
  volume={18},
  number={13},
  pages={639--41},
  year={1905}
}**********************************************************************

Testing FirstBiblio.bib...

======================================================================
Inspecting script file UnixPrac1.txt...

File contents are:
**********************************************************************
## THIS TEXT FILE CONTAINS THE ANSWERS FOR THE FASTA EXERCISE ##

## 1 - COUNTING NUMBER OF LINES IN EACH FASTA FILE ##

printf "1. The number of lines in each fasta file is as follows:\n" && 
wc -l ../data/fasta/*.fasta

#########################################################
#   COMMENTS:
#   ---------
#   * \n prints a new line
#   * the -l flag counts the number of lines of a file
#########################################################

## 2 - PRINTING THE SEQUENCE OF THE E.COLI GENOME ##

printf "\n2. The sequence of the E.coli genome is: \n" && 
tail -n +2 ../data/fasta/E.coli.fasta

#########################################################
#   COMMENTS:
#   ---------
#   * the -n +2 flag outputs the content of the 
#     file starting from the second line
#########################################################

## 3 - COUNTING THE SEQUENCE LENGTH OF THE E.COLI GENOME ##

printf "\n3. The length of the E.coli genome sequence is " &&
tail -n +2 ../data/fasta/E.coli.fasta | tr -d '\n' | wc -m

#########################################################
#   COMMENTS:
#   ---------
#   * first part similar to command #2
#   * the -m flag prints the number of characters. 
#     However, this flag also takes into account 
#     trailing newlines. 
#   * the -d '\n' flag deals with this issue by 
#     deleting those newlines
#
#   ADDITIONAL COMMENT:
#   -------------------
#   Just to mention that there are two extra letters 
#   (R and Y) in the sequence. The length of the 
#   whole sequence is 4686137, but 4686135 if we 
#   exclude those two extra letters. 
#########################################################

## 4 - COUNTING THE MATCHES OF "ATGC" IN THE E.COLI GENOME ##

printf "\n4. The number of matches of the sequence 'ATGC' in the E.coli genome is " && 
tail -n +2 ../data/fasta/E.coli.fasta | tr -d '\n' | grep -o ATGC | wc -l

#########################################################
#   COMMENTS:
#   ---------
#   * the -o flag prints all the matched parts in the 
#     file, each on a separate line. This way we can 
#     figure out the number of occurences of the 
#     pattern by using the wc -l command
#   * without using the -o flag, we would only be 
#     counting the lines that contain the matched
#     pattern. So, if there is more than one occurence 
#     of the pattern in one line, we would not be able 
#     to detect it.
#########################################################

## 5 - COMPUTING THE AT/GC RATIO IN THE E.COLI GENOME ##

printf "\n5. The AT/GC ratio in the E.coli genome is " &&
base_A=$(grep -o A ../data/fasta/E.coli.fasta | wc -l) && 
base_T=$(grep -o T ../data/fasta/E.coli.fasta | wc -l) && 
base_G=$(grep -o G ../data/fasta/E.coli.fasta | wc -l) && 
base_C=$(grep -o C ../data/fasta/E.coli.fasta | wc -l) &&
printf "%.3f\n" "$(bc -l <<< "($base_A+$base_T) / ($base_G+$base_C)")"

#########################################################
#   COMMENTS:
#   ---------
#   * each variable computes the number of occurences 
#     of one of the four bases in the sequence
#   * the bc command serves as a calculator for bash. 
#     This is where we divide the total number of A-s 
#     and T-s with the total number of G-s and C-s to 
#     obtain the AT/GC ratio
#   * the -l flag assumes 20 digits after the decimal 
#     point by default
#   * the second printf command was included for the 
#     purpose of producing the output in a proper 
#     format:
#       - % takes anything before the digit
#       - 3f takes 3 digits after the decimal point
#       - \n inserts a new line
#
#   ADDITIONAL COMMENT:
#   -------------------
#   I tried running this command without assigning 
#   variables so that it becomes a one-liner, but it was 
#   ~3.7x more time-consuming. Therefore, I decided to 
#   stick with this one.
##########################################################
**********************************************************************

Testing UnixPrac1.txt...

======================================================================
Inspecting script file tabtocsv.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Hovig Artinian ha819@imperial.ac.uk
# Script: tabtocsv.sh
# Description: substitute the tabs in the files with commas
#
# Saves the output into a .csv file
# Arguments: 1 -> tab delimited file
# Date: Oct 2019

# handling input parameters
if [ -z $1 ]
then 
    echo "Please input a file name..."
    echo "Script did not execute." 
    exit 
fi

echo "Creating a comma delimited version of $1 ..."
cat $1 | tr -s "\t" "," >> $1.csv
echo "Done!"

for file in $1.csv
do
    mv "$file" "$(basename "$file" .txt.csv).csv" # fixing the file extension from .txt.csv to just .csv
done

exit

**********************************************************************

Testing tabtocsv.sh...

Output (only first 500 characters): 

**********************************************************************
Please input a file name...
Script did not execute.

**********************************************************************

Code ran without errors

Time consumed = 0.00726s

======================================================================
Inspecting script file .txt.txt...

File contents are:
**********************************************************************
**********************************************************************

Testing .txt.txt...

======================================================================
Inspecting script file boilerplate.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Hovig Artinian ha819@imperial.ac.uk
# Script: boilerplate.sh
# Desc: simple boilerplate for shell scripts
# Arguments: none
# Date: Oct 2019

echo -e "\nThis is a shell script! \n" #what does -e do?

#exit
**********************************************************************

Testing boilerplate.sh...

Output (only first 500 characters): 

**********************************************************************

This is a shell script! 


**********************************************************************

Code ran without errors

Time consumed = 0.00460s

======================================================================
======================================================================
Finished running scripts

Ran into 0 errors

======================================================================
Assessing WEEK10...

Found the following directories: code, sandbox, data, results

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
# Week 10: Biological Data Structures and C

* The tenth week introduced basics of procedural programming in C and applications related to biological data structures such as (phylogenetic) trees and other networks.

* The **Week10** directory includes the following subdirectories: *code*, *data*, *results*, and *sandbox*.
    - code - includes all the Week 10 in-class scripts
    - data - empty; can include data needed for some C scripts
    - results - essentially an empty directory, but includes a .gitignore file (since completely empty directories cannnot be pushed to git)
    - sandbox - similar to a recycle bin; disposing files that are not needed for assessment, but might still be useful for the author if and when needed

## Authors

Jedi (in training): Hovig Artinian

Academic email: ha819@ic.ac.uk

Personal email: artinianhovig@gmail.com

## License

None

## Acknowledgements

Tenth week of Jedi training completed!
**********************************************************************

Found following files in results directory: .gitignore...

Found 1 code files: comp.run.sh

Found the following extra files: tree.o, tree.h, node.h, tree.c
0.5 pt deducted per extra file

Current Points = 97.5

======================================================================
Testing script/code files...

======================================================================
Inspecting script file comp.run.sh...

File contents are:
**********************************************************************
#!/bin/bash

# compiles C program:
gcc -Wall $1
error=$?

if [ $error != 0 ]
then
    echo "Fix errors to obtain output"

else
    # run the program:
    ./a.out

fi
**********************************************************************

Testing comp.run.sh...

Output (only first 500 characters): 

**********************************************************************
Fix errors to obtain output

**********************************************************************

Encountered error (or warning):
gcc: fatal error: no input files
compilation terminated.

======================================================================
======================================================================
Finished running scripts

Ran into 1 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 97.5

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!